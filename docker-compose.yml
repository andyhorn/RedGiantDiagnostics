# Filename:       docker-compose.yml
# Author:         Andy Horn
# Created:        4/10/2020
# Description:    This is the base/production version of the 
#                 docker-compose configuration for the app.
#                 It will launch all the containers in "production" mode.

version: "3"
services:
  # DotNet Core Web API backend
  api:
    container_name: rg-api
    build:
      # Use the api Dockerfile to build
      context: ./api
      dockerfile: Dockerfile
    depends_on: 
      # Wait for the database before building
      - database
    restart: "unless-stopped"
    # Pull sensitive information from an environment file
    env_file: api.env
    environment: 
      # Set the listening ports for http and https
      ASPNETCORE_URLS: http://*:5000
      # Default to "Production", otherwise read from the environment
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      # Set the host for the database connection
      DB_HOST: database

  # Vue.js frontend
  web:
    container_name: rg-web
    build:
      # Use the web Dockerfile to build
      context: ./web
      dockerfile: Dockerfile
    environment: 
      # Set the node environment, defaulting to production
      NODE_ENV: ${NODE_ENV:-production}
      # Set the hostname for the API connection
      API_HOST: api
      # Set the port for the API connection
      API_PORT: 5000
    ports:
      - ${WEB_PORT:-80:80} # Pull the web port from the environment - default to 80
    # Restart the container unless manually stopped
    restart: "unless-stopped"
    depends_on: 
      # Wait for the API before starting
      - api

  # PostgreSQL Database
  database:
    container_name: rg-database
    # Use the standard Postgres image
    image: postgres:12
    # Restart the container unless manually stopped
    restart: unless-stopped
    # Read sensitive information from a file
    env_file: database.env
    volumes:
      # Save database data to a local volume
      - db_data:/var/lib/postgresql/data
    ports:
      # Expose the database server port
      - "5432:5432"

  # PGAdmin Server
  pgadmin:
    container_name: "pgadmin"
    image: dpage/pgadmin4:4
    # Read sensitive information from a file
    env_file: pgadmin.env
    ports:
      # Expose the port for connecting through a browser
      - "8080:80"
    depends_on: 
      # Wait for the database container before starting
      - database

volumes:
  db_data: